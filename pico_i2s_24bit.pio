/* 
 * The MIT License (MIT)
 *
 * Copyright (c) 2022 nzc21489
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 *
 */

.program audio_i2s_24bit

bitloop0:
    wait 0 pin 0 ; LRCK = Low
    wait 1 pin 1 ; rising edge of BCK
    out pins, 1
    wait 0 pin 1 ; falling edge of BCK
    jmp x-- bitloop0

wait_R:
    wait 0 pin 0 ; LRCK = Low
    wait 1 pin 1 ; rising edge of BCK
    set pins, 0
    mov x, isr

bitloop1:
    wait 1 pin 0 ; LRCK = High
    wait 1 pin 1 ; rising edge of BCK
    out pins, 1
    wait 0 pin 1 ; falling edge of BCK
    jmp x-- bitloop1

wait_L:
    wait 1 pin 0 ; LRCK = High
    wait 1 pin 1 ; rising edge of BCK
    set pins, 0
    mov x, isr
    jmp bitloop0


; wait until first L-ch
public entry_point:
    mov x, isr
    wait 0 pin, 0 ; LRCK = Low
    wait 0 pin, 0 ; falling edge of LRCK
    wait 0 pin, 1 ; falling edge of BCK
    jmp bitloop0


% c-sdk {

static inline void audio_i2s_24bit_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint clock_pin_base, uint res_bits) {
    pio_sm_config sm_config = audio_i2s_program_get_default_config(offset);
    
    sm_config_set_out_pins(&sm_config, data_pin, 1);
    sm_config_set_in_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, false, true, 8);

    pio_sm_init(pio, sm, offset, &sm_config);

    uint pin_mask = (1u << data_pin);
    pio_sm_set_pindirs_with_mask(pio, sm, pin_mask, pin_mask);
    pio_sm_set_pins(pio, sm, 0); // clear pins

    // set resolution to ISR (use as config value)
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_put_blocking(pio, sm, res_bits-1); // res_bits should be 24
    pio_sm_exec(pio, sm, pio_encode_pull(false, false));
    pio_sm_exec(pio, sm, pio_encode_out(pio_isr, 64));

    pio_sm_exec(pio, sm, pio_encode_jmp(offset + audio_i2s_24bit_offset_entry_point));
}

%}
